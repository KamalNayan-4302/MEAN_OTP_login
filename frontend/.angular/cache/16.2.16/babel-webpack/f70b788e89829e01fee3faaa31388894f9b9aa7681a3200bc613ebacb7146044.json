{"ast":null,"code":"export function mobileValidator() {\n  return control => {\n    const value = control.value?.toString();\n    if (!value) {\n      return null;\n    }\n    // Remove any whitespace\n    const cleanedValue = value.replace(/\\s/g, '');\n    // Check if it's exactly 10 digits\n    if (cleanedValue.length !== 10 || !/^[0-9]*$/.test(cleanedValue)) {\n      return {\n        mobileInvalid: true\n      };\n    }\n    return null;\n  };\n}","map":{"version":3,"names":["mobileValidator","control","value","toString","cleanedValue","replace","length","test","mobileInvalid"],"sources":["E:\\MEAN__OTP\\frontend\\src\\app\\auth\\validators.ts"],"sourcesContent":["import { AbstractControl, ValidationErrors, ValidatorFn } from '@angular/forms';\n\nexport function mobileValidator(): ValidatorFn {\n  return (control: AbstractControl): ValidationErrors | null => {\n    const value = control.value?.toString();\n    if (!value) {\n      return null;\n    }\n\n    // Remove any whitespace\n    const cleanedValue = value.replace(/\\s/g, '');\n    \n    // Check if it's exactly 10 digits\n    if (cleanedValue.length !== 10 || !/^[0-9]*$/.test(cleanedValue)) {\n      return { mobileInvalid: true };\n    }\n\n    return null;\n  };\n}\n"],"mappings":"AAEA,OAAM,SAAUA,eAAeA,CAAA;EAC7B,OAAQC,OAAwB,IAA6B;IAC3D,MAAMC,KAAK,GAAGD,OAAO,CAACC,KAAK,EAAEC,QAAQ,EAAE;IACvC,IAAI,CAACD,KAAK,EAAE;MACV,OAAO,IAAI;;IAGb;IACA,MAAME,YAAY,GAAGF,KAAK,CAACG,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;IAE7C;IACA,IAAID,YAAY,CAACE,MAAM,KAAK,EAAE,IAAI,CAAC,UAAU,CAACC,IAAI,CAACH,YAAY,CAAC,EAAE;MAChE,OAAO;QAAEI,aAAa,EAAE;MAAI,CAAE;;IAGhC,OAAO,IAAI;EACb,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}