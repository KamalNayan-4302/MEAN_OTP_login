{"ast":null,"code":"import { BehaviorSubject, throwError } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http) {\n      this.http = http;\n      this.currentUserSubject = new BehaviorSubject(JSON.parse(localStorage.getItem('currentUser') || '{}'));\n      this.currentUser = this.currentUserSubject.asObservable();\n    }\n    get currentUserValue() {\n      return this.currentUserSubject.value;\n    }\n    login(payload) {\n      return this.http.post(`${environment.apiUrl}/auth/login`, payload, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).pipe(map(response => {\n        if (response.success && response.token) {\n          localStorage.setItem('currentUser', JSON.stringify(response.user));\n          this.currentUserSubject.next(response.user);\n        }\n        return response;\n      }), catchError(error => {\n        return throwError(error);\n      }));\n    }\n    loginWithMobile(mobile, password) {\n      return this.http.post(`${environment.apiUrl}/auth/login`, {\n        mobile,\n        password\n      }).pipe(map(response => {\n        if (response.success && response.token) {\n          localStorage.setItem('currentUser', JSON.stringify(response.user));\n          this.currentUserSubject.next(response.user);\n        }\n        return response;\n      }), catchError(error => {\n        return throwError(error);\n      }));\n    }\n    loginOtp(email) {\n      return this.http.post(`${environment.apiUrl}/auth/login-otp`, {\n        email\n      }).pipe(map(response => response), catchError(error => throwError(error)));\n    }\n    loginOtpMobile(mobile) {\n      return this.http.post(`${environment.apiUrl}/auth/login-otp`, {\n        mobile\n      }).pipe(map(response => response), catchError(error => throwError(error)));\n    }\n    // Combined OTP verification for login\n    verifyEmailOtp(email, otp) {\n      return this.http.post(`${environment.apiUrl}/auth/verify-otp`, {\n        email,\n        otp\n      }).pipe(map(response => response), catchError(error => throwError(error)));\n    }\n    verifyMobileOtp(mobile, otp) {\n      return this.http.post(`${environment.apiUrl}/auth/verify-otp`, {\n        mobile,\n        otp\n      }).pipe(map(response => response), catchError(error => throwError(error)));\n    }\n    logout() {\n      localStorage.removeItem('currentUser');\n      this.currentUserSubject.next({});\n    }\n    get userProfilePhoto() {\n      return this.currentUserValue && this.currentUserValue.profilePhoto ? this.currentUserValue.profilePhoto : null;\n    }\n    isLoggedIn() {\n      const token = localStorage.getItem('token');\n      const user = localStorage.getItem('currentUser');\n      return !!token && !!user;\n    }\n    register(formData) {\n      return this.http.post(`${environment.apiUrl}/user/register`, formData, {\n        reportProgress: true,\n        observe: 'events'\n      }).pipe(map(response => response), catchError(error => throwError(error)));\n    }\n    completeRegistration(mobile, otp) {\n      return this.http.post(`${environment.apiUrl}/auth/complete-registration`, {\n        mobile,\n        otp\n      }).pipe(map(response => {\n        if (response.success) {\n          localStorage.setItem('currentUser', JSON.stringify(response.user));\n          this.currentUserSubject.next(response.user);\n          return response;\n        }\n        return throwError(new Error(response.message || 'Registration completion failed'));\n      }), catchError(error => {\n        console.error('Registration completion error:', error);\n        return throwError(error.error?.message || 'An error occurred during registration completion');\n      }));\n    }\n    resendEmailOtp(email) {\n      return this.http.post(`${environment.apiUrl}/auth/login-otp`, {\n        email\n      }).pipe(map(response => response), catchError(error => throwError(error)));\n    }\n    static {\n      this.ɵfac = function AuthService_Factory(t) {\n        return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: AuthService,\n        factory: AuthService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}